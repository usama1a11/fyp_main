/*plugins {
    id "com.android.application"
    // START: FlutterFire Configuration
    id 'com.google.gms.google-services'
    // END: FlutterFire Configuration
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

android {
    namespace = "com.example.furnitureworldapplication"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.example.app"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdk = 21
        targetSdk = 33
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
        }
    }
}
flutter {
    source = "../.."
}
apply plugin: 'com.google.gms.google-services'*/
plugins {
    id "com.android.application"
    // START: FlutterFire Configuration
    id 'com.google.gms.google-services'
    // END: FlutterFire Configuration
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

android {
    namespace = "com.example.app"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // Specify your own unique Application ID.
        applicationId = "com.example.app"
        minSdk = 23
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }

    buildTypes {
        release {
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
//    implementation platform('com.google.firebase:firebase-bom:32.0.0')// Firebase BOM
    implementation 'com.stripe:stripe-android:20.48.6'
//    implementation 'com.google.firebase:firebase-analytics'             // Firebase Analytics

    // Add other Firebase dependencies here if needed, e.g.:
    // implementation 'com.google.firebase:firebase-auth'  // For Firebase Authentication
}

flutter {
    source = "../.."
}

apply plugin: 'com.google.gms.google-services'

/*
// Buildscript block must come first
buildscript {
    ext.kotlin_version = '1.9.0'  // Correct Kotlin version
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.0'  // Update Gradle plugin version
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.google.gms:google-services:4.3.15'  // Update Google services version
    }
}

// Now the plugins block
plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.google.gms.google-services'
    id 'dev.flutter.flutter-gradle-plugin'
}

// All projects repositories
allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

// Android block for configuring the Android app
android {
    namespace "com.example.furnitureworldapplication"
    compileSdkVersion 34

    defaultConfig {
        applicationId "com.example.app"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode 1  // Set a static version code
        versionName "1.0.0"  // Set a static version name
        multiDexEnabled true  // If needed
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    signingConfigs {
        release {
            // Replace with your actual keystore details
            storeFile file("path/to/your/keystore.jks")
            storePassword "your_keystore_password"
            keyAlias "your_key_alias"
            keyPassword "your_key_password"
        }
    }
    buildTypes {
        release {
            minifyEnabled true  // Enable code shrinking (must be true if shrinkResources is true)
            shrinkResources true  // Enable resource shrinking
            signingConfig signingConfigs.release // Use the release signing config
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }

// Flutter-specific configuration
    flutter {
        source '../..'
    }

    apply plugin: 'com.google.gms.google-services'

// Dependencies block for including necessary libraries
    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        // Add other dependencies if necessary
    }
}
*/
//buildscript {
//    ext.kotlin_version = '1.9.0'  // Correct Kotlin version
//    repositories {
//        google()
//        mavenCentral()
//    }
//    dependencies {
//        classpath 'com.android.tools.build:gradle:8.0.0'  // Update Gradle plugin version
//        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
//        classpath 'com.google.gms:google-services:4.3.15'  // Update Google services version
//    }
//}
//
//// Now the plugins block
//plugins {
//    id 'com.android.application'
//    id 'kotlin-android'
//    id 'dev.flutter.flutter-gradle-plugin'
//}
//
//// All projects repositories
//allprojects {
//    repositories {
//        google()
//        mavenCentral()
//    }
//}
//
//// Android block for configuring the Android app
//android {
//    namespace "com.example.furnitureworldapplication"
//    compileSdkVersion 34
//
//    defaultConfig {
//        applicationId "com.example.app"
//        minSdkVersion 21
//        targetSdkVersion 33
//        versionCode 1  // Set a static version code
//        versionName "1.0.0"  // Set a static version name
//        multiDexEnabled true  // If needed
//    }
//
//    compileOptions {
//        sourceCompatibility JavaVersion.VERSION_1_8
//        targetCompatibility JavaVersion.VERSION_1_8
//    }
//
//    signingConfigs {
//        release {
//            // Replace with your actual keystore details
//            storeFile file("path/to/your/keystore.jks")
//            storePassword "your_keystore_password"
//            keyAlias "your_key_alias"
//            keyPassword "your_key_password"
//        }
//    }
//
//    buildTypes {
//        release {
//            minifyEnabled true  // Enable code shrinking (must be true if shrinkResources is true)
//            shrinkResources true  // Enable resource shrinking
//            signingConfig signingConfigs.release // Use the release signing config
//        }
//        debug {
//            signingConfig signingConfigs.debug
//        }
//    }
//
//    // Flutter-specific configuration
//    flutter {
//        source '../..'
//    }
//}
//
//// Dependencies block for including necessary libraries
//dependencies {
//    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
//    implementation 'com.google.firebase:firebase-analytics:21.0.0'  // Firebase Analytics
//    implementation 'com.google.firebase:firebase-auth:22.0.0'      // Firebase Auth
//    // Add other dependencies if necessary
//}
//
//// Apply Google Services plugin at the end
//apply plugin: 'com.google.gms.google-services'

// Android block for configuring the Android app
/*
android {
    namespace "com.example.furnitureworldapplication"
    compileSdkVersion 34  // Updated compileSdkVersion

    defaultConfig {
        applicationId "com.example.app"
        minSdkVersion 21
        targetSdkVersion 34  // Updated targetSdkVersion
        versionCode 1  // Set a static version code
        versionName "1.0.0"  // Set a static version name
        multiDexEnabled true  // If needed
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        release {
            storeFile file("path/to/your/keystore_file.jks") // Update with your keystore file path
            storePassword "your_keystore_password" // Update with your keystore password
            keyAlias "your_key_alias" // Update with your key alias
            keyPassword "your_key_password" // Update with your key password
        }
    }

    buildTypes {
        release {
            minifyEnabled true  // Enable code shrinking
            shrinkResources true // Enable resource shrinking
            signingConfig signingConfigs.release // Use the release signing config
        }
        debug {
            minifyEnabled false // No shrinking for debug builds
        }
    }
}

// Dependencies block for including necessary libraries
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    // Add other dependencies if necessary
}

// Apply Google Services plugin at the end
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.gms.google-services'*/
